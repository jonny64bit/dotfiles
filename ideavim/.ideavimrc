""" Map leader to Space
"" ========================================================
let mapleader=" "

""" Plugins
"" ========================================================
set NERDTree
set easymotion
set highlightedyank
set argtextobj
set sneak
set quickscope
set which-key

""" Plugin settings
"" ========================================================
let g:argtextobj_pairs="[:],(:),<:>"
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

""" Common settings
"" ========================================================

" which key panel timeout
set notimeout

set showmode
set visualbell

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=10

" Do incremental searching.
set incsearch

set ignorecase
set smartcase
set incsearch
set hlsearch

set relativenumber
set number
set startofline

""" Idea specific settings
"" ========================================================

set ideajoin
set idearefactormode=select

"" Key mappings
"" ========================================================

" Tab navigation
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprev<CR>

nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
nnoremap [[ :action MethodUp<cr>
nnoremap ]] :action MethodDown<cr>

" Search
nmap <leader>/ :action Find<cr>
let g:WhichKeyDesc_fd = "<leader>/ Find 📄🔍"

nmap <leader>. :action FindInPath<cr>
let g:WhichKeyDesc_fd = "<leader>. Find In Files 📄🔍"

" Popup navigation
map <C-j> <Action>(EditorDown)
map <C-k> <Action>(EditorUp)

" Don't use Ex mode, use Q for formatting.
map Q gq

"" Leader commands
"" ========================================================

" Comment lines
" map <leader>cl <action>(CommentByLineComment)

" Jump around with easymotion
map <leader>s <Plug>(easymotion-s)
" map <leader>e <Plug>(easymotion-f)

" Open NERDTree (use q to exit)
" map <leader>x :NERDTreeToggle<CR>

" Folding
" map <leader>zc :action CollapseAllRegions<CR>
" map <leader>zo :action ExpandAllRegions<CR>

" Window splits
" map <leader>wv <Action>(SplitVertically)
" map <leader>ws <Action>(SplitHorizontally)
" map <leader>wu <Action>(Unsplit)
" map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Actions
" map <leader>am <action>(ShowIntentionActions)
" map <leader>as <action>(SearchEverywhere)

" 🔭 Telescope
" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fb <action>(Switcher)
map <leader>ft <action>(TextSearchAction)
map <leader>fo <action>(RecentFiles)
map <leader>fs <Action>(FileStructurePopup)
map <leader>fc <Action>(GotoClass)

let g:WhichKeyDesc_FileSearch = "<leader>f File Search 🔎"

" ⚓ Harpoon
map <leader>hh <action>(ShowBookmarks)
map <leader>ha <action>(ToggleBookmark)
map <leader>hj <action>(GotoNextBookmark)
map <leader>hk <action>(GotoPreviousBookmark)

let g:WhichKeyDesc_bookmarks = "<leader>h Bookmarks 🔖"
let g:WhichKeyDesc_show_bookmarks = "<leader>hh Show 🎭"
let g:WhichKeyDesc_toggle_bookmark = "<leader>ha Toggle ✅"
let g:WhichKeyDesc_next_bookmark = "<leader>hj Next ⏭️"
let g:WhichKeyDesc_last_bookmark = "<leader>hk Previous ⏮️"

" Close active tab
map <leader>q <action>(CloseContent)
let g:WhichKeyDesc_run_selected_tests = "<leader>q Close 🎭"

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rp <Action>(Refactorings.QuickListPopupAction)
map <leader>rr <Action>(ReformatCode)
map <leader>rc <action>(CommentByLineComment)

" Go to code
map <leader>gd <Action>(GotoDeclaration)
map <leader>gy <Action>(GotoTypeDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gu <Action>(ShowUsages)
map <leader>gt <Action>(GotoTest)
map <leader>gf <Action>(Back)
map <leader>gb <Action>(Forward)

let g:WhichKeyDesc_GoToCode = "<leader>g Go To 🚶‍♂️‍➡️"

" Run & Debugging
map <leader>pd <Action>(Debug)
map <leader>pq <Action>(Stop)
map <leader>pt :action Tool_External Tools_Alacritty<cr>
map <leader>pr :action IdeaVim.ReloadVimRc.reload<cr> 
map <leader>pv :action RevealIn<cr>

let g:WhichKeyDesc_run = "<leader>p Run 🏃"
let g:WhichKeyDesc_Debug = "<leader>pq Debug 🐛"
let g:WhichKeyDesc_Stop = "<leader>pd Stop 🚫"
let g:WhichKeyDesc_terminal = "<leader>pt Terminal 🖥️"
let g:WhichKeyDesc_reloadideavim = "<leader>pr Reload 🔄"
let g:WhichKeyDesc_containing_folder = "<leader>pv Containing Folder 📁"

" Tests
if &ide =~? 'rider'
    map <leader>ts <Action>(RiderUnitTestRunSolutionAction)
    map <leader>tf <Action>(RiderUnitTestRerunBrokenSplitAction)
    map <leader>tp <Action>(RiderUnitTestQuickListPopupAction) 
    map <leader>td <Action>(RiderUnitTestDebugContextAction)
    map <leader>tt <Action>(RiderUnitTestRunContextAction)
    
    let g:WhichKeyDesc_Tests = "<leader>t Tests 🚦"
    let g:WhichKeyDesc_run_all_tests = "<leader>ts Run All 🟩"
    let g:WhichKeyDesc_run_broken_tests = "<leader>tf Run Failed 🟥"
    let g:WhichKeyDesc_tests_menu = "<leader>tp Menu 📲"
    let g:WhichKeyDesc_debug_tests = "<leader>td Debug Selected 🐛🔛"
    let g:WhichKeyDesc_run_selected_tests = "<leader>tt Run Selected 🔛"
endif

map <leader>b <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_toggle_breakpoint = "<leader>b Toggle Breakpoint 🔴"

" Which Key
"" ========================================================
let g:WhichKey_FontSize = 16
let g:WhichKey_Divider = " → "
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_leader = "<leader> Leader key"
